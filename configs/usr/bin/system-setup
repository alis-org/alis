#!/usr/bin/bash
#
# ALIS â€” Arch Linux Install Script
#
#set -euo pipefail


owner=

parse_arguments(){
  for argument in "$@"
  do
  case $argument in
    --update-boot)
    action=update_secure_boot
      shift
      ;;
    --first-start)
    action=first_start
      shift
      ;;
     *)
      printf "%s\n"  "Error"
      ;;
  esac
  done
}

create_owner(){
    sh /usr/lib/pam_snapper/pam_snapper_useradd.sh  "${owner}"  "${owner}" 
    usermod --comment="Owner" -G wheel,lp  --shell=/bin/zsh "${owner}"
    cp /etc/skel/.zshrc /home/"${owner}"
    cp -r /etc/skel/.config /home/"${owner}"
    chown "${owner}":"${owner}" /home/${owner}/{.config,.zshrc}
    passwd ${owner} -d -e
}

generate_keys(){
    rm -rf /etc/efikeys
    mkdir /etc/efikeys
    cd /etc/efikeys
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=Secure boot PK/"  -keyout PK.key \
                -out PK.crt -days 3650 -nodes -sha256
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=Secure boot KEK/"  -keyout KEK.key \
                -out KEK.crt -days 3650 -nodes -sha256
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=Secure boot db/" -keyout db.key \
                -out db.crt -days 3650 -nodes -sha256

    openssl x509 -in PK.crt -out PK.cer -outform DER
    openssl x509 -in KEK.crt -out KEK.cer -outform DER
    openssl x509 -in db.crt -out db.cer -outform DER

    GUID="$(uuidgen --random)"
    echo "${GUID}" > GUID

    cert-to-efi-sig-list -g "${GUID}" PK.crt PK.esl
    cert-to-efi-sig-list -g "${GUID}" KEK.crt KEK.esl
    cert-to-efi-sig-list -g "${GUID}" db.crt db.esl

    echo -n > PK_null.esl

    sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth
    sign-efi-sig-list -k PK.key -c PK.crt PK PK_null.esl PK_null.auth

    chmod 0400 *.{key,auth}
    sync
}

enroll_keys(){
    cd /etc/efikeys
    efi-updatevar -e -f KEK.esl KEK
    efi-updatevar -e -f db.esl db
    efi-updatevar -f PK.auth PK
}

create_efi_app(){
cat /boot/intel-ucode.img /boot/initramfs-linux.img > /boot/initrd-combined.img

rm -rf /boot/EFI/Linux/arch.efi
objcopy \
        --add-section .osrel="/usr/lib/os-release" --change-section-vma .osrel=0x20000 \
        --add-section .cmdline="/boot/cmdline" --change-section-vma .cmdline=0x30000 \
        --add-section .linux="/boot/vmlinuz-linux" --change-section-vma .linux=0x40000 \
        --add-section .initrd="/boot/initrd-combined.img" --change-section-vma .initrd=0x3000000 \
         "/usr/lib/systemd/boot/efi/linuxx64.efi.stub" "/boot/EFI/Linux/arch.efi"
         sbverify  --cert /etc/efikeys/db.crt /boot/EFI/Linux/arch.efi
 }

sign_efi(){
   cd /etc/efikeys
   sbsign --key /etc/efikeys/db.key --cert /etc/efikeys/db.crt --output /boot/EFI/Linux/arch.efi /boot/EFI/Linux/arch.efi
   sbsign --key /etc/efikeys/db.key --cert /etc/efikeys/db.crt --output /boot/EFI/BOOT/BOOTX64.EFI /boot/EFI/BOOT/BOOTX64.EFI
   sbsign --key /etc/efikeys/db.key --cert /etc/efikeys/db.crt --output /boot/EFI/systemd/systemd-bootx64.efi /boot/EFI/systemd/systemd-bootx64.efi
   sbverify  --cert /etc/efikeys/db.crt /boot/EFI/Linux/arch.efi
   sbverify  --cert /etc/efikeys/db.crt /boot/EFI/BOOT/BOOTX64.EFI
   sbverify  --cert /etc/efikeys/db.crt /boot/EFI/systemd/systemd-bootx64.efi
}

create_efi_entety(){
  efibootmgr -b 0000 -B
  efibootmgr --create --disk /dev/sda --part 1 --loader /EFI/Linux/arch.efi --label "Arch Linux"
  efibootmgr -n 0000
}

update_secure_boot(){
create_efi_app
create_efi_entety
bootctl update
sign_efi
}

first_start(){
	clear
	tput clear
	tput cup 33 66
	echo "Choose new username: "
	tput cup 33 87
	read -p "" owner
	tput cup 34 66
        create_owner >/dev/null 2>/dev/null
        generate_keys >/dev/null 2>/dev/null
        enroll_keys >/dev/null 2>/dev/null
        create_efi_app >/dev/null 2>/dev/null
        create_efi_entety >/dev/null 2>/dev/null
	systemctl disable system-setup >/dev/null 2>/dev/null
	tput cup 34 66
	echo "Now login to system"
	tput cup 35 66
	sleep 3
	tput clear
	clear
}

main(){
        parse_arguments "$@"
        "$action"
}

main "$@"
