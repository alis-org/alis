#!/usr/bin/bash
#
# ALIS â€” Arch Linux Install Script
#
set -euo pipefail

create_owner(){
    read -p "Enter a owner user name: " owner
    echo "$owner" > owner
    sh /usr/lib/pam_snapper/pam_snapper_useradd.sh  "${owner}"  "${owner}"
    usermod --comment="Owner" -G wheel,lp  --shell=/bin/zsh "${owner}"
    cp /etc/skel/.zshrc /home/"${owner}"
    cp -r /etc/skel/.config /home/"${owner}"
    chown "${owner}":"${owner}" /home/${owner}/{.config,.zshrc}
    passwd "${owner}"
}

generate_keys(){
    rm -rf /etc/sbp/*
    cd /etc/sbp
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=Secure boot PK/"  -keyout PK.key \
                -out PK.crt -days 3650 -nodes -sha256
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=Secure boot KEK/"  -keyout KEK.key \
                -out KEK.crt -days 3650 -nodes -sha256
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=Secure boot db/" -keyout db.key \
                -out db.crt -days 3650 -nodes -sha256

    openssl x509 -in PK.crt -out PK.cer -outform DER
    openssl x509 -in KEK.crt -out KEK.cer -outform DER
    openssl x509 -in db.crt -out db.cer -outform DER

    GUID="$(uuidgen --random)"
    echo "${GUID}" > GUID

    cert-to-efi-sig-list -g "${GUID}" PK.crt PK.esl
    cert-to-efi-sig-list -g "${GUID}" KEK.crt KEK.esl
    cert-to-efi-sig-list -g "${GUID}" db.crt db.esl

    echo -n > PK_null.esl

    sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth
    sign-efi-sig-list -k PK.key -c PK.crt PK PK_null.esl PK_null.auth

    chmod 0400 *.{key,auth}
    sync
}

enroll_keys(){
    cd /etc/sbp
    efi-updatevar -e -f KEK.esl KEK
    efi-updatevar -e -f db.esl db
    efi-updatevar -f PK.auth PK
}

create_efi_app(){
  rm -rf /boot/EFI
  mkdir -p /boot/EFI/BOOT
  sbpctl standalone --osrel="/etc/os-release"  --cmdline="/proc/cmdline"  --initrd="/boot/intel-ucode.img" --initrd="/boot/initramfs-linux.img" --sign /boot/vmlinuz-linux /boot/EFI/BOOT/BOOTX64.EFI
 }
create_efi_entety(){
  efibootmgr -O
  efibootmgr --create --disk /dev/sda --part 1 --loader /EFI/BOOT/BOOTX64.EFI --label "Secure Boot"
  efibootmgr -D
}

create_owner
#generate_keys
#enroll_keys
#create_efi_app

