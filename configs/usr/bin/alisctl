#!/usr/bin/bash
#
# ALIS â€” Arch Linux Install Script
#
#set -euo pipefail


user=

parse_arguments(){
  for argument in "$@"
  do
  case $argument in
  --update-boot)
    action=update_secure_boot
      shift
      ;;
  --create-user)
    action=create_user
      shift
      ;;
  --generate-efi-keys)
    action=generate_efi_keys
      shift
      ;;
  --get-email)
    action=get_email
      shift
      ;;
  --first-start)
    action=first_start
      shift
      ;;
   --get-fullname)
    action=get_fullname
      shift
      ;;
     *)
      printf "%s\n"  "Error"
      ;;
  esac
  done
}

create_user(){
    clear
    read -p "user login: " user
    read -p "full name:  " name
    read -p "e-mail address: " email
    read -p "allow use sudo: " asudo
    clear
    echo login:"$user", name:"$name",  e-mail:"$mail", sudo:"$asudo"
    read -p "is this correct? " answer
    case ${answer:0:1} in
        y|Y )
             sh /usr/lib/pam_snapper/pam_snapper_useradd.sh  "${user}"  "${user}"
             cp /etc/skel/.zshrc /home/"${user}"
             cp -r /etc/skel/.config /home/"${user}"
             chown -R "${user}":"${user}" /home/"${user}"/.config
             chown -R "${user}":"${user}" /home/"${user}"/.zshrc
             passwd ${user} -d -e
             case ${asudo:0:1} in
                y|Y )
                        usermod -G wheel -c "$name $email"  --shell=/bin/zsh "${user}"
                ;;
                n|N )
                        usermod  -c "$name $email" --shell=/bin/zsh "${user}"
                ;;
             esac
             ;;
             n|N)
             create_user
             ;;
    esac
    echo "$user successfully created"
    sleep 3
}

generate_efi_keys(){
    rm -rf /etc/efikeys
    mkdir /etc/efikeys
    cd /etc/efikeys
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=Secure boot PK/"  -keyout PK.key \
                -out PK.crt -days 3650 -nodes -sha256
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=Secure boot KEK/"  -keyout KEK.key \
                -out KEK.crt -days 3650 -nodes -sha256
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=Secure boot db/" -keyout db.key \
                -out db.crt -days 3650 -nodes -sha256

    openssl x509 -in PK.crt -out PK.cer -outform DER
    openssl x509 -in KEK.crt -out KEK.cer -outform DER
    openssl x509 -in db.crt -out db.cer -outform DER

    GUID="$(uuidgen --random)"
    echo "${GUID}" > GUID

    cert-to-efi-sig-list -g "${GUID}" PK.crt PK.esl
    cert-to-efi-sig-list -g "${GUID}" KEK.crt KEK.esl
    cert-to-efi-sig-list -g "${GUID}" db.crt db.esl

    echo -n > PK_null.esl

    sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth
    sign-efi-sig-list -k PK.key -c PK.crt PK PK_null.esl PK_null.auth

    chmod 0400 *.{key,auth}
    sync
}

enroll_keys(){
    cd /etc/efikeys
    efi-updatevar -e -f KEK.esl KEK
    efi-updatevar -e -f db.esl db
    efi-updatevar -f PK.auth PK
}

create_efi_app(){
cat /boot/intel-ucode.img /boot/initramfs-linux.img > /boot/initrd-combined.img

rm -rf /boot/EFI/Linux/arch.efi
objcopy \
        --add-section .osrel="/usr/lib/os-release" --change-section-vma .osrel=0x20000 \
        --add-section .cmdline="/boot/cmdline" --change-section-vma .cmdline=0x30000 \
        --add-section .linux="/boot/vmlinuz-linux" --change-section-vma .linux=0x40000 \
        --add-section .initrd="/boot/initrd-combined.img" --change-section-vma .initrd=0x3000000 \
         "/usr/lib/systemd/boot/efi/linuxx64.efi.stub" "/boot/EFI/Linux/arch.efi"
 }

sign_efi(){
   cd /etc/efikeys
   sbsign --key /etc/efikeys/db.key --cert /etc/efikeys/db.crt --output /boot/EFI/Linux/arch.efi /boot/EFI/Linux/arch.efi
   sbsign --key /etc/efikeys/db.key --cert /etc/efikeys/db.crt --output /boot/EFI/BOOT/BOOTX64.EFI /boot/EFI/BOOT/BOOTX64.EFI
   sbsign --key /etc/efikeys/db.key --cert /etc/efikeys/db.crt --output /boot/EFI/systemd/systemd-bootx64.efi /boot/EFI/systemd/systemd-bootx64.efi
   sbverify  --cert /etc/efikeys/db.crt /boot/EFI/Linux/arch.efi
   sbverify  --cert /etc/efikeys/db.crt /boot/EFI/BOOT/BOOTX64.EFI
   sbverify  --cert /etc/efikeys/db.crt /boot/EFI/systemd/systemd-bootx64.efi
}

create_efi_entety(){
  efibootmgr -b 0000 -B
  efibootmgr --create --disk /dev/sda --part 1 --loader /EFI/Linux/arch.efi --label "Arch Linux"
  efibootmgr -n 0000
}

get_email(){
getent passwd $UID| awk -F : '{print $5}' | awk -F, '{ print $5}'
}

get_fullname(){
getent passwd $UID| awk -F : '{print $5}' | awk -F, '{ print $1}'
}

update_secure_boot(){
create_efi_app
bootctl update
create_efi_entety
sign_efi
}

first_start(){
	clear
        create_user
        generate_efi_keys
        enroll_keys
	mkdir -p /boot/EFI/Linux
	update_secure_boot
	sleep 3
	clear
}

main(){
        parse_arguments "$@"
        "$action"
}

main "$@"
